# Multi-Kong Instance Composition
# Deploys Keycloak with multiple Kong instances
# Each Kong instance can connect to a different realm
#
# Usage:
#   docker-compose -f compose/docker-compose.multi-kong.yml --env-file compose/environments/dev.env up -d
#   Or use CLI: kc-deploy multi-kong --instances 2

networks:
  keycloak-network:
    name: keycloak-network
  kong-network:
    name: kong-network

volumes:
  postgres-data:
    name: keycloak-postgres-data

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: keycloak-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-keycloak}
      POSTGRES_USER: ${POSTGRES_USER:-keycloak}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - keycloak-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-keycloak}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Keycloak with multiple realms
  keycloak:
    image: quay.io/keycloak/keycloak:24.0
    container_name: keycloak
    restart: unless-stopped
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: postgres
      KC_DB_URL_DATABASE: ${POSTGRES_DB:-keycloak}
      KC_DB_USERNAME: ${POSTGRES_USER:-keycloak}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_HEALTH_ENABLED: "true"
      KC_HTTP_ENABLED: "true"
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_IMPORT: /opt/keycloak/data/import/realms/*.json
    volumes:
      - ../infrastructure/keycloak/config/realms:/opt/keycloak/data/import/realms:ro
    ports:
      - "${KEYCLOAK_PORT:-8080}:8080"
    networks:
      - keycloak-network
      - kong-network
    depends_on:
      postgres:
        condition: service_healthy
    command:
      - start-dev
      - --import-realm
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/localhost/8080"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 60s

  # Kong Public Instance (kong-realm)
  kong-public:
    image: kong:3.9.1-ubuntu
    container_name: kong-public
    restart: unless-stopped
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/config/kong-public.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_LOG_LEVEL: notice
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_PROXY_LISTEN: "0.0.0.0:8000, 0.0.0.0:8443 ssl"
    volumes:
      - ../infrastructure/kong/config/instances/kong-public.yml:/kong/config/kong-public.yml:ro
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
    networks:
      - kong-network
    depends_on:
      keycloak:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kong Internal Instance (internal-realm)
  kong-internal:
    image: kong:3.9.1-ubuntu
    container_name: kong-internal
    restart: unless-stopped
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/config/kong-internal.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_LOG_LEVEL: notice
      KONG_ADMIN_LISTEN: "0.0.0.0:9001"
      KONG_PROXY_LISTEN: "0.0.0.0:9000, 0.0.0.0:9443 ssl"
    volumes:
      - ../infrastructure/kong/config/instances/kong-internal.yml:/kong/config/kong-internal.yml:ro
    ports:
      - "9000:9000"
      - "9443:9443"
      - "9001:9001"
    networks:
      - kong-network
    depends_on:
      keycloak:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Demo Application
  backend:
    build:
      context: ../applications/backend-demo
      dockerfile: Dockerfile
    container_name: backend-api
    restart: unless-stopped
    environment:
      APP_NAME: "Backend Demo API"
      LOG_LEVEL: info
      HOST: "0.0.0.0"
      PORT: "8080"
      ENABLE_DOCS: "true"
    networks:
      - kong-network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8080/health')"]
      interval: 10s
      timeout: 5s
      retries: 5

